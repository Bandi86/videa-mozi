name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quality Assurance
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: cd app/backend && pnpm tsc --noEmit

      - name: Run linter
        run: cd app/backend && pnpm eslint src/**/*.ts --ext .ts

      - name: Security audit
        run: pnpm audit --audit-level=moderate

      - name: Run tests
        run: cd app/backend && pnpm test --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./app/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "store_path=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.store_path }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build backend
        run: cd app/backend && pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: |
            app/backend/dist/
            app/backend/package.json
            app/backend/package-lock.json
          retention-days: 7

  # Docker Build & Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: app/backend/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: videa-mozi:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-app -p 3001:3001 videa-mozi:test
          sleep 10
          curl -f http://localhost:3001/health/live || exit 1
          docker stop test-app

  # Deploy to Staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: app/backend/

      - name: Deploy to staging server
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, scp, docker push, etc.

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: app/backend/

      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # Add your production deployment commands here
          # Example: rsync, scp, docker push, etc.

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [quality, build, docker]
    if: always()
    steps:
      - name: Send notification
        run: |
          echo "ðŸ“¢ CI/CD Pipeline completed!"
          echo "Quality checks: ${{ needs.quality.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Docker: ${{ needs.docker.result }}"

          # Add notification logic here (Slack, Discord, email, etc.)
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"CI/CD Pipeline completed!"}' $WEBHOOK_URL
